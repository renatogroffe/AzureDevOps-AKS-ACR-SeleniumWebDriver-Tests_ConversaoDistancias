trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '8b607807-6a7d-4b03-9301-93d567e5e782'
  imageRepository: 'siteconversaodistancias'
  containerRegistry: 'testes.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'imagePullSecret'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Variáveis execução testes
  File_Log_Execucao_WebApp: 'log-execucao-webapp.log'
  Path_Projeto: './ConversorDistancias'
  Path_Projeto_Testes: './ConversorDistancias.Testes'
  Executavel_Projeto: 'ConversorDistancias.dll'  

stages:
- stage: Tests
  displayName: Tests stage
  jobs:
  - job: Testes
    displayName: Testes da aplicação Web com Selenium
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        dotnet publish $(Path_Projeto) -c Release -o app
        cd ./app
        nohup dotnet $(Executavel_Projeto) > $(File_Log_Execucao_WebApp) 2>&1 &
        echo 'Aguardando a inicialização da aplicação a ser testada...'
        sleep 10s
      displayName: Executar a aplicação a ser testada em background (nohup)
      env:
        ASPNETCORE_URLS: 'http://localhost:5000'
    - task: DotNetCoreCLI@2
      displayName: Execução dos testes de integração
      inputs:
        command: 'test'
        projects: '$(Path_Projeto_Testes)'
    - script: |
        cd ./app
        cat $(File_Log_Execucao_WebApp)
      displayName: Exibir log de execução da aplicação testada
      condition: Always()

- stage: Build
  displayName: Build stage
  dependsOn: Tests
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'SiteConversaoDistancias'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

